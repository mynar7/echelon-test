{"version":3,"sources":["util/echelon.ts","components/loading.tsx","components/error.tsx","components/classCard.tsx","components/classModal.tsx","pages/main.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["isClassList","obj","Array","isArray","a","fetch","response","json","classData","items","sort","b","sortOrder","Loading","className","ErrorMessage","onClick","window","location","reload","ClassCard","classInfo","setCurrentClass","difficulty","getDifficultyEmoji","level","name","src","image","alt","ClassModal","currentClass","modalContentRef","useRef","dismissModal","e","current","contains","target","ref","desc","inst","cat","product","len","getListOfFilters","classes","from","reduce","list","cls","add","Set","makeFilterDefaultState","names","MainPage","classList","difficulties","defaultDifficultyState","useState","difficultyFilters","setDifficultyFilters","instructors","defaultInstructorState","instructorFilters","setInstructorFilters","categories","defaultCategoryState","categoryFilters","setCategoryFilters","menuFilterRef","searchQuery","setSearchQuery","filterMenuIsOpen","setFilterMenuIsOpen","makeHandleCheckBox","stateObj","setter","filterByOptions","optionName","filterObj","allTrue","Object","values","every","filter","allFalse","toggleFilterMenu","clearFilters","filteredClasses","filteredByName","toLowerCase","includes","filteredByDifficulty","filteredByInstructor","filterClasses","elementClicked","nodeName","placeholder","type","value","onChange","aria-hidden","map","index","checked","instructor","category","length","App","setClasses","loading","setLoading","errorLoading","setErrorLoading","useEffect","getClasses","then","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4c15aa6e.chunk.js","sourcesContent":["interface classData {\n  items: [trainingClass];\n  total: number;\n  page: number;\n  limit: number;\n}\nexport type trainingClass = {\n  id: number;\n  name: string;\n  desc: string;\n  image: string;\n  cat: string;\n  inst: string;\n  len: string;\n  level: string;\n  product: string;\n  sortOrder: number;\n  explicit: boolean;\n  createdAt: string;\n  updatedAt: string;\n};\nfunction isClassList(obj: any): obj is [trainingClass] {\n  return Array.isArray(obj as [trainingClass]);\n}\nasync function getClasses(): Promise<trainingClass[] | false> {\n  try {\n    const response = await fetch(\n      \"https://gist.githubusercontent.com/jasonbyrne/881459829d342a2ddd495165fb815c2d/raw/e0fb08e2fa2a8288a124b1a187b86ecba35d2cb9/echelon-videos-example.json\"\n    );\n    const classData = await response.json();\n    if (isClassList(classData.items))\n      return classData.items.sort(\n        (a: trainingClass, b: trainingClass) => a.sortOrder - b.sortOrder\n      );\n    else return false;\n  } catch (err) {\n    return false;\n  }\n}\n\nexport { getClasses };\n","function Loading() {\n  return <div className=\"center-screen\">Loading</div>;\n}\n\nexport default Loading;\n","function ErrorMessage() {\n  return (\n    <div className=\"center-screen\">\n      <p>Error retrieving data!</p>\n      <button onClick={() => window.location.reload()}>Reload</button>\n    </div>\n  );\n}\n\nexport default ErrorMessage;\n","import { Dispatch, SetStateAction } from \"react\";\nimport { trainingClass } from \"../util/echelon\";\nimport \"./classCard.css\";\n\nfunction ClassCard({\n  classInfo,\n  setCurrentClass,\n}: {\n  classInfo: trainingClass;\n  setCurrentClass: Dispatch<SetStateAction<trainingClass | null>>;\n}) {\n  function getDifficultyEmoji(difficulty: string) {\n    switch (difficulty) {\n      case \"Beginner\":\n        return \"üíö\";\n      case \"Intermediate\":\n        return \"üíõ\";\n      case \"Advanced\":\n        return \"‚ù§Ô∏è\";\n      default:\n        return \"‚ö™\";\n    }\n  }\n  return (\n    <div className=\"class-card\" onClick={() => setCurrentClass(classInfo)}>\n      <p className=\"class-card__title\">\n        {getDifficultyEmoji(classInfo.level)} {classInfo.name}\n      </p>\n      <img\n        className=\"class-card__img\"\n        src={classInfo.image}\n        alt={classInfo.name + \" thumbnail\"}\n      />\n    </div>\n  );\n}\n\nexport default ClassCard;\n","import { Dispatch, SetStateAction, useRef, MouseEvent } from \"react\";\nimport { trainingClass } from \"../util/echelon\";\nimport \"./classModal.css\";\n\nfunction ClassModal({\n  currentClass,\n  setCurrentClass,\n}: {\n  currentClass: trainingClass | null;\n  setCurrentClass: Dispatch<SetStateAction<trainingClass | null>>;\n}) {\n  const modalContentRef = useRef<HTMLDivElement>(null);\n\n  function dismissModalFromMargin(e: MouseEvent<HTMLElement>) {\n    if (modalContentRef.current?.contains(e.target as HTMLElement)) return;\n    dismissModal();\n  }\n\n  const dismissModal = () => setCurrentClass(null);\n\n  return (\n    <div\n      className={`class-modal column f-center ${\n        currentClass ? \"class-modal--open\" : \"\"\n      }`}\n      onClick={dismissModalFromMargin}\n    >\n      <div ref={modalContentRef} className=\"class-modal__content column\">\n        <button onClick={dismissModal} className=\"close-button\">\n          &#10006;\n        </button>\n        <h2 className=\"class-modal__class-title\">{currentClass?.name}</h2>\n        {currentClass?.desc && <p>{currentClass.desc}</p>}\n        <img src={currentClass?.image} alt={currentClass?.name} />\n        <h3>Instructor: {currentClass?.inst}</h3>\n        <p>Level: {currentClass?.level}</p>\n        <div className=\"row f-center\">\n          <p>Category: {currentClass?.cat}</p>\n          <p>Product: {currentClass?.product}</p>\n          <p>Length: {currentClass?.len}</p>\n        </div>\n        <button className=\"button-as-link\" onClick={dismissModal}>\n          Dismiss\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default ClassModal;\n","import React, { ChangeEventHandler, useState, useRef } from \"react\";\nimport { trainingClass } from \"../util/echelon\";\nimport ClassCard from \"../components/classCard\";\nimport ClassModal from \"../components/classModal\";\nimport \"./main.css\";\n\ninterface filters {\n  [key: string]: boolean;\n}\n\nfunction getListOfFilters(name: string, classes: trainingClass[]) {\n  return Array.from(\n    classes.reduce(\n      (list, cls: trainingClass) => list.add(cls[name as keyof trainingClass]),\n      new Set()\n    )\n  ) as string[];\n}\n\nfunction makeFilterDefaultState(names: string[]): { [key: string]: false } {\n  const stateObj: { [key: string]: false } = {};\n  return names.reduce((obj, name) => {\n    obj[name] = false;\n    return obj;\n  }, stateObj);\n}\n\nfunction MainPage({ classList }: { classList: trainingClass[] }) {\n  const difficulties = getListOfFilters(\"level\", classList);\n  const defaultDifficultyState = makeFilterDefaultState(difficulties);\n  const [difficultyFilters, setDifficultyFilters] = useState<filters>(\n    defaultDifficultyState\n  );\n\n  const instructors = getListOfFilters(\"inst\", classList);\n  const defaultInstructorState = makeFilterDefaultState(instructors);\n  const [instructorFilters, setInstructorFilters] = useState<filters>(\n    defaultInstructorState\n  );\n\n  const categories = getListOfFilters(\"cat\", classList);\n  const defaultCategoryState = makeFilterDefaultState(categories);\n  const [categoryFilters, setCategoryFilters] = useState<filters>(\n    defaultCategoryState\n  );\n\n  const menuFilterRef = useRef<HTMLDivElement>(null);\n\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [filterMenuIsOpen, setFilterMenuIsOpen] = useState(false);\n  const [currentClass, setCurrentClass] = useState<trainingClass | null>(null);\n\n  function makeHandleCheckBox(\n    stateObj: { [key: string]: boolean },\n    setter: Function\n  ) {\n    return function handleCheckBox(e: React.ChangeEvent<HTMLInputElement>) {\n      setter({ ...stateObj, [e.target.name]: !stateObj[e.target.name] });\n    };\n  }\n\n  function filterClassNames(classes: trainingClass[]): trainingClass[] {\n    return classes.filter(({ name }) =>\n      name.toLowerCase().includes(searchQuery.toLowerCase())\n    );\n  }\n\n  function filterByOptions(\n    optionName: string,\n    filterObj: { [key: string]: boolean },\n    classes: trainingClass[]\n  ): trainingClass[] {\n    const allTrue = Object.values(filterObj).every((filter) => filter === true);\n    const allFalse = Object.values(filterObj).every(\n      (filter) => filter === false\n    );\n    if (allTrue || allFalse) return classes;\n    return classes.filter(\n      (cls) => filterObj[cls[optionName as keyof trainingClass] as string]\n    );\n  }\n\n  function filterClasses(classList: trainingClass[]): trainingClass[] {\n    const filteredByName = filterClassNames(classList);\n    const filteredByDifficulty = filterByOptions(\n      \"level\",\n      difficultyFilters,\n      filteredByName\n    );\n    const filteredByInstructor = filterByOptions(\n      \"inst\",\n      instructorFilters,\n      filteredByDifficulty\n    );\n    const filteredByCategory = filterByOptions(\n      \"cat\",\n      categoryFilters,\n      filteredByInstructor\n    );\n    return filteredByCategory;\n  }\n\n  function toggleFilterMenu() {\n    setFilterMenuIsOpen(!filterMenuIsOpen);\n  }\n\n  function closeFilterMenu(e: React.MouseEvent<HTMLElement>) {\n    const elementClicked = e.target as HTMLElement;\n    if (\n      !menuFilterRef.current?.contains(elementClicked) &&\n      elementClicked.nodeName !== \"BUTTON\"\n    )\n      setFilterMenuIsOpen(false);\n  }\n  function clearFilters() {\n    setSearchQuery(\"\");\n    setDifficultyFilters(defaultDifficultyState);\n    setInstructorFilters(defaultInstructorState);\n    setCategoryFilters(defaultCategoryState);\n  }\n  const filteredClasses = filterClasses(classList);\n  return (\n    <div className=\"main-page\" onClick={closeFilterMenu}>\n      <h1 className=\"main-page__title\">Echelon Classes</h1>\n      <div className=\"main-page__filter-controls row f-center\">\n        <input\n          placeholder=\"Filter Class Names\"\n          type=\"text\"\n          value={searchQuery}\n          onChange={(e) => setSearchQuery(e.target.value)}\n        />\n        <button className=\"button-as-link\" onClick={toggleFilterMenu}>\n          Show Filters\n        </button>\n        <button className=\"button-as-link\" onClick={clearFilters}>\n          Clear\n        </button>\n      </div>\n      {/* Filter Menu */}\n      <div\n        ref={menuFilterRef}\n        className={`filter-menu column ${\n          filterMenuIsOpen ? \"filter-menu--open\" : \"\"\n        }`}\n        aria-hidden={!filterMenuIsOpen}\n      >\n        <button className=\"close-button\" onClick={toggleFilterMenu}>\n          &#10006;\n        </button>\n        <p className=\"filter-menu__filter-title\">Difficulties</p>\n        <div className=\"filter-menu__input-group\">\n          {difficulties.map((difficulty, index) => (\n            <label key={index}>\n              {difficulty}\n              <input\n                type=\"checkbox\"\n                name={difficulty}\n                value={difficulty}\n                checked={difficultyFilters[difficulty]}\n                onChange={makeHandleCheckBox(\n                  difficultyFilters,\n                  setDifficultyFilters\n                )}\n              />\n            </label>\n          ))}\n        </div>\n        <p className=\"filter-menu__filter-title\">Instructors</p>\n        <div className=\"filter-menu__input-group\">\n          {instructors.map((instructor, index) => (\n            <label key={index}>\n              {instructor}\n              <input\n                type=\"checkbox\"\n                name={instructor}\n                value={instructor}\n                checked={instructorFilters[instructor]}\n                onChange={makeHandleCheckBox(\n                  instructorFilters,\n                  setInstructorFilters\n                )}\n              />\n            </label>\n          ))}\n        </div>\n        <p className=\"filter-menu__filter-title\">Categories</p>\n        <div className=\"filter-menu__input-group\">\n          {categories.map((category, index) => (\n            <label key={index}>\n              {category}\n              <input\n                type=\"checkbox\"\n                name={category}\n                value={category}\n                checked={categoryFilters[category]}\n                onChange={makeHandleCheckBox(\n                  categoryFilters,\n                  setCategoryFilters\n                )}\n              />\n            </label>\n          ))}\n        </div>\n        <div className=\"row f-center\">\n          <button onClick={clearFilters} className=\"button-as-link\">\n            Clear All\n          </button>\n          <button onClick={toggleFilterMenu} className=\"button-as-link\">\n            Close\n          </button>\n        </div>\n      </div>\n      {/* Card Container */}\n      <div className=\"main-page__class-cards-container\">\n        {filteredClasses.length ? (\n          filteredClasses.map((classInfo, index) => (\n            <ClassCard\n              key={index}\n              classInfo={classInfo}\n              setCurrentClass={setCurrentClass}\n            />\n          ))\n        ) : (\n          <h2 className=\"main-page__no-classes-msg\">No Classes Found</h2>\n        )}\n      </div>\n      {/* Modal */}\n      <ClassModal\n        currentClass={currentClass}\n        setCurrentClass={setCurrentClass}\n      />\n    </div>\n  );\n}\n\nexport default MainPage;\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { getClasses, trainingClass } from \"./util/echelon\";\nimport Loading from \"./components/loading\";\nimport ErrorMessage from \"./components/error\";\nimport MainPage from \"./pages/main\";\n\nfunction App() {\n  const [classes, setClasses] = useState<trainingClass[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [errorLoading, setErrorLoading] = useState(false);\n\n  useEffect(() => {\n    getClasses().then((classData) => {\n      if (classData) setClasses(classData);\n      else setErrorLoading(true);\n      setLoading(false);\n    });\n  }, []);\n  return (\n    <>\n      {loading ? (\n        <Loading />\n      ) : errorLoading ? (\n        <ErrorMessage />\n      ) : (\n        <MainPage classList={classes} />\n      )}\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}