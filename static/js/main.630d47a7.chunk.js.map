{"version":3,"sources":["util/echelon.ts","components/loading.tsx","components/error.tsx","components/classCard.tsx","components/classModal.tsx","components/checkboxGroup.tsx","pages/main.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["isClassList","obj","Array","isArray","a","fetch","response","json","classData","items","sort","b","sortOrder","Loading","className","ErrorMessage","onClick","window","location","reload","ClassCard","classInfo","setCurrentClass","difficulty","getDifficultyEmoji","level","name","src","image","alt","ClassModal","currentClass","modalContentRef","useRef","dismissModal","e","current","contains","target","ref","desc","inst","cat","product","len","CheckboxGroup","groupName","optionsList","optionsFilters","setOptionsFilters","map","option","index","type","value","checked","onChange","stateObj","setter","getListOfFilters","classes","from","reduce","list","cls","add","Set","makeFilterDefaultState","names","MainPage","classList","difficulties","defaultDifficultyState","useState","difficultyFilters","setDifficultyFilters","instructors","defaultInstructorState","instructorFilters","setInstructorFilters","categories","defaultCategoryState","categoryFilters","setCategoryFilters","menuFilterRef","searchQuery","setSearchQuery","filterMenuIsOpen","setFilterMenuIsOpen","filterByOptions","optionName","filterObj","allTrue","Object","values","every","filter","allFalse","toggleFilterMenu","clearFilters","filteredClasses","filteredByName","toLowerCase","includes","filteredByDifficulty","filteredByInstructor","filterClasses","elementClicked","nodeName","placeholder","tabIndex","aria-hidden","length","App","setClasses","loading","setLoading","errorLoading","setErrorLoading","useEffect","getClasses","then","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.630d47a7.chunk.js","sourcesContent":["export type trainingClass = {\n  id: number;\n  name: string;\n  desc: string;\n  image: string;\n  cat: string;\n  inst: string;\n  len: string;\n  level: string;\n  product: string;\n  sortOrder: number;\n  explicit: boolean;\n  createdAt: string;\n  updatedAt: string;\n};\n\nfunction isClassList(obj: any): obj is [trainingClass] {\n  return Array.isArray(obj as [trainingClass]);\n}\n\nasync function getClasses(): Promise<trainingClass[] | false> {\n  try {\n    const response = await fetch(\n      \"https://gist.githubusercontent.com/jasonbyrne/881459829d342a2ddd495165fb815c2d/raw/e0fb08e2fa2a8288a124b1a187b86ecba35d2cb9/echelon-videos-example.json\"\n    );\n    const classData = await response.json();\n    if (isClassList(classData.items))\n      return classData.items.sort(\n        (a: trainingClass, b: trainingClass) => a.sortOrder - b.sortOrder\n      );\n    else return false;\n  } catch (err) {\n    return false;\n  }\n}\n\nexport { getClasses };\n","function Loading() {\n  return <div className=\"center-screen\">Loading</div>;\n}\n\nexport default Loading;\n","function ErrorMessage() {\n  return (\n    <div className=\"center-screen\">\n      <p>Error retrieving data!</p>\n      <button onClick={() => window.location.reload()}>Reload</button>\n    </div>\n  );\n}\n\nexport default ErrorMessage;\n","import { Dispatch, SetStateAction } from \"react\";\nimport { trainingClass } from \"../util/echelon\";\nimport \"./classCard.css\";\n\nfunction ClassCard({\n  classInfo,\n  setCurrentClass,\n}: {\n  classInfo: trainingClass;\n  setCurrentClass: Dispatch<SetStateAction<trainingClass | null>>;\n}) {\n  function getDifficultyEmoji(difficulty: string) {\n    switch (difficulty) {\n      case \"Beginner\":\n        return \"üíö\";\n      case \"Intermediate\":\n        return \"üíõ\";\n      case \"Advanced\":\n        return \"‚ù§Ô∏è\";\n      default:\n        return \"‚ö™\";\n    }\n  }\n  return (\n    <div className=\"class-card\" onClick={() => setCurrentClass(classInfo)}>\n      <p className=\"class-card__title\">\n        {getDifficultyEmoji(classInfo.level)} {classInfo.name}\n      </p>\n      <img\n        className=\"class-card__img\"\n        src={classInfo.image}\n        alt={classInfo.name + \" thumbnail\"}\n      />\n    </div>\n  );\n}\n\nexport default ClassCard;\n","import { Dispatch, SetStateAction, useRef, MouseEvent } from \"react\";\nimport { trainingClass } from \"../util/echelon\";\nimport \"./classModal.css\";\n\nfunction ClassModal({\n  currentClass,\n  setCurrentClass,\n}: {\n  currentClass: trainingClass | null;\n  setCurrentClass: Dispatch<SetStateAction<trainingClass | null>>;\n}) {\n  const modalContentRef = useRef<HTMLDivElement>(null);\n\n  // function to dismiss modal when user clicks outside of modal\n  function dismissModalFromMargin(e: MouseEvent<HTMLElement>) {\n    if (modalContentRef.current?.contains(e.target as HTMLElement)) return;\n    dismissModal();\n  }\n\n  const dismissModal = () => setCurrentClass(null);\n\n  return (\n    <div\n      className={`class-modal column ${\n        currentClass ? \"class-modal--open\" : \"\"\n      }`}\n      onClick={dismissModalFromMargin}\n    >\n      <div ref={modalContentRef} className=\"class-modal__content column\">\n        <button onClick={dismissModal} className=\"close-button\">\n          &#10006;\n        </button>\n        <h2 className=\"class-modal__class-title\">{currentClass?.name}</h2>\n        {currentClass?.desc && <p>{currentClass.desc}</p>}\n        <img src={currentClass?.image} alt={currentClass?.name} />\n        <h3>Instructor: {currentClass?.inst}</h3>\n        <p>Level: {currentClass?.level}</p>\n        <div className=\"row f-center\">\n          <p>Category: {currentClass?.cat}</p>\n          <p>Product: {currentClass?.product}</p>\n          <p>Length: {currentClass?.len}</p>\n        </div>\n        <button className=\"button-as-link\" onClick={dismissModal}>\n          Dismiss\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default ClassModal;\n","import { Dispatch, SetStateAction } from \"react\";\n// creates a checkboxHandler to map checkbox checking to state object\ntype filter = { [key: string]: boolean };\n\nfunction makeHandleCheckBox(\n  stateObj: { [key: string]: boolean },\n  setter: Function\n) {\n  return function handleCheckBox(e: React.ChangeEvent<HTMLInputElement>) {\n    setter({ ...stateObj, [e.target.name]: !stateObj[e.target.name] });\n  };\n}\n\nfunction CheckboxGroup({\n  groupName,\n  optionsList,\n  optionsFilters,\n  setOptionsFilters,\n}: {\n  groupName: string;\n  optionsList: string[];\n  optionsFilters: filter;\n  setOptionsFilters: Dispatch<SetStateAction<filter>>;\n}) {\n  return (\n    <>\n      <p className=\"filter-menu__filter-title\">{groupName}</p>\n      <div className=\"filter-menu__input-group\">\n        {optionsList.map((option, index) => (\n          <label key={index}>\n            {option}\n            <input\n              type=\"checkbox\"\n              name={option}\n              value={option}\n              checked={optionsFilters[option]}\n              onChange={makeHandleCheckBox(optionsFilters, setOptionsFilters)}\n            />\n          </label>\n        ))}\n      </div>\n    </>\n  );\n}\n\nexport default CheckboxGroup;\n","import { useState, useRef, MouseEvent } from \"react\";\nimport { trainingClass } from \"../util/echelon\";\nimport ClassCard from \"../components/classCard\";\nimport ClassModal from \"../components/classModal\";\nimport CheckboxGroup from \"../components/checkboxGroup\";\nimport \"./main.css\";\n\ninterface filters {\n  [key: string]: boolean;\n}\n\n// returns a de-duped list of values from class object properties\nfunction getListOfFilters(name: string, classes: trainingClass[]) {\n  return Array.from(\n    classes.reduce(\n      (list, cls: trainingClass) => list.add(cls[name as keyof trainingClass]),\n      new Set()\n    )\n  ) as string[];\n}\n// creates an object with keys from list of possible property values\n// all values are set to false on creation\nfunction makeFilterDefaultState(names: string[]): { [key: string]: false } {\n  const stateObj: { [key: string]: false } = {};\n  return names.reduce((obj, name) => {\n    obj[name] = false;\n    return obj;\n  }, stateObj);\n}\n\nfunction MainPage({ classList }: { classList: trainingClass[] }) {\n  // dynamically create menu options to filter based on API response\n  const difficulties = getListOfFilters(\"level\", classList);\n  const defaultDifficultyState = makeFilterDefaultState(difficulties);\n  const [difficultyFilters, setDifficultyFilters] = useState<filters>(\n    defaultDifficultyState\n  );\n\n  const instructors = getListOfFilters(\"inst\", classList);\n  const defaultInstructorState = makeFilterDefaultState(instructors);\n  const [instructorFilters, setInstructorFilters] = useState<filters>(\n    defaultInstructorState\n  );\n\n  const categories = getListOfFilters(\"cat\", classList);\n  const defaultCategoryState = makeFilterDefaultState(categories);\n  const [categoryFilters, setCategoryFilters] = useState<filters>(\n    defaultCategoryState\n  );\n\n  const menuFilterRef = useRef<HTMLDivElement>(null);\n\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [filterMenuIsOpen, setFilterMenuIsOpen] = useState(false);\n  // setting current class shows class modal, setting it to null hides the modal\n  const [currentClass, setCurrentClass] = useState<trainingClass | null>(null);\n\n  // filters list based on user's typed query\n  function filterClassNames(classes: trainingClass[]): trainingClass[] {\n    return classes.filter(({ name }) =>\n      name.toLowerCase().includes(searchQuery.toLowerCase())\n    );\n  }\n  // a generic function that filters based on selected checkboxes mapped\n  // to an object with keys that are the checkbox name and values that are boolean\n  function filterByOptions(\n    optionName: string,\n    filterObj: { [key: string]: boolean },\n    classes: trainingClass[]\n  ): trainingClass[] {\n    const allTrue = Object.values(filterObj).every((filter) => filter === true);\n    const allFalse = Object.values(filterObj).every(\n      (filter) => filter === false\n    );\n    if (allTrue || allFalse) return classes;\n    return classes.filter(\n      (cls) => filterObj[cls[optionName as keyof trainingClass] as string]\n    );\n  }\n\n  // runs list of classes through all available filter methods\n  function filterClasses(classList: trainingClass[]): trainingClass[] {\n    const filteredByName = filterClassNames(classList);\n    const filteredByDifficulty = filterByOptions(\n      \"level\",\n      difficultyFilters,\n      filteredByName\n    );\n    const filteredByInstructor = filterByOptions(\n      \"inst\",\n      instructorFilters,\n      filteredByDifficulty\n    );\n    const filteredByCategory = filterByOptions(\n      \"cat\",\n      categoryFilters,\n      filteredByInstructor\n    );\n    return filteredByCategory;\n  }\n\n  function toggleFilterMenu() {\n    setFilterMenuIsOpen(!filterMenuIsOpen);\n  }\n\n  function closeFilterMenu(e: MouseEvent<HTMLElement>) {\n    const elementClicked = e.target as HTMLElement;\n    if (\n      !menuFilterRef.current?.contains(elementClicked) &&\n      elementClicked.nodeName !== \"BUTTON\"\n    )\n      setFilterMenuIsOpen(false);\n  }\n\n  function clearFilters() {\n    setSearchQuery(\"\");\n    setDifficultyFilters(defaultDifficultyState);\n    setInstructorFilters(defaultInstructorState);\n    setCategoryFilters(defaultCategoryState);\n  }\n\n  // create filtered class list to render below\n  const filteredClasses = filterClasses(classList);\n\n  return (\n    <div className=\"main-page\" onClick={closeFilterMenu}>\n      <h1 className=\"main-page__title\">Echelon Classes</h1>\n      <div className=\"main-page__filter-controls row f-center\">\n        <input\n          placeholder=\"Filter Class Names\"\n          type=\"text\"\n          value={searchQuery}\n          onChange={(e) => setSearchQuery(e.target.value)}\n          tabIndex={currentClass ? -1 : 0}\n        />\n        <button\n          tabIndex={currentClass ? -1 : 0}\n          className=\"button-as-link\"\n          onClick={toggleFilterMenu}\n        >\n          Show Filters\n        </button>\n        <button\n          tabIndex={currentClass ? -1 : 0}\n          className=\"button-as-link\"\n          onClick={clearFilters}\n        >\n          Clear\n        </button>\n      </div>\n      {/* Filter Menu */}\n      <div\n        ref={menuFilterRef}\n        className={`filter-menu column ${\n          filterMenuIsOpen ? \"filter-menu--open\" : \"\"\n        }`}\n        aria-hidden={!filterMenuIsOpen}\n      >\n        <button className=\"close-button\" onClick={toggleFilterMenu}>\n          &#10006;\n        </button>\n        <CheckboxGroup\n          groupName={\"Difficulties\"}\n          optionsList={difficulties}\n          optionsFilters={difficultyFilters}\n          setOptionsFilters={setDifficultyFilters}\n        />\n        <CheckboxGroup\n          groupName={\"Instructors\"}\n          optionsList={instructors}\n          optionsFilters={instructorFilters}\n          setOptionsFilters={setInstructorFilters}\n        />\n        <CheckboxGroup\n          groupName={\"Categories\"}\n          optionsList={categories}\n          optionsFilters={categoryFilters}\n          setOptionsFilters={setCategoryFilters}\n        />\n        <div className=\"row f-center\">\n          <button onClick={clearFilters} className=\"button-as-link\">\n            Clear All\n          </button>\n          <button onClick={toggleFilterMenu} className=\"button-as-link\">\n            Close\n          </button>\n        </div>\n      </div>\n      {/* Card Container */}\n      <div className=\"main-page__class-cards-container\">\n        {filteredClasses.length ? (\n          filteredClasses.map((classInfo, index) => (\n            <ClassCard\n              key={index}\n              classInfo={classInfo}\n              setCurrentClass={setCurrentClass}\n            />\n          ))\n        ) : (\n          <h2 className=\"main-page__no-classes-msg\">No Classes Found</h2>\n        )}\n      </div>\n      {/* Modal */}\n      <ClassModal\n        currentClass={currentClass}\n        setCurrentClass={setCurrentClass}\n      />\n    </div>\n  );\n}\n\nexport default MainPage;\n","import { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { getClasses, trainingClass } from \"./util/echelon\";\nimport Loading from \"./components/loading\";\nimport ErrorMessage from \"./components/error\";\nimport MainPage from \"./pages/main\";\n\nfunction App() {\n  const [classes, setClasses] = useState<trainingClass[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [errorLoading, setErrorLoading] = useState(false);\n\n  useEffect(() => {\n    getClasses().then((classData) => {\n      if (classData) setClasses(classData);\n      else setErrorLoading(true);\n      setLoading(false);\n    });\n  }, []);\n  return (\n    <>\n      {loading ? (\n        <Loading />\n      ) : errorLoading ? (\n        <ErrorMessage />\n      ) : (\n        <MainPage classList={classes} />\n      )}\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}